 class Stopwatch {
            constructor() {
                this.startTime = 0;
                this.elapsedTime = 0;
                this.timerInterval = null;
                this.isRunning = false;
                this.laps = [];
                
                this.initializeElements();
                this.bindEvents();
            }

            initializeElements() {
                this.timeDisplay = document.getElementById('timeDisplay');
                this.millisecondsDisplay = document.getElementById('millisecondsDisplay');
                this.startBtn = document.getElementById('startBtn');
                this.pauseBtn = document.getElementById('pauseBtn');
                this.lapBtn = document.getElementById('lapBtn');
                this.resetBtn = document.getElementById('resetBtn');
                this.lapsList = document.getElementById('lapsList');
                this.display = document.getElementById('display');
            }

            bindEvents() {
                this.startBtn.addEventListener('click', () => this.start());
                this.pauseBtn.addEventListener('click', () => this.pause());
                this.lapBtn.addEventListener('click', () => this.recordLap());
                this.resetBtn.addEventListener('click', () => this.reset());
            }

            start() {
                if (!this.isRunning) {
                    this.startTime = Date.now() - this.elapsedTime;
                    this.timerInterval = setInterval(() => this.updateDisplay(), 10);
                    this.isRunning = true;
                    
                    this.startBtn.disabled = true;
                    this.pauseBtn.disabled = false;
                    this.lapBtn.disabled = false;
                    this.display.classList.add('running');
                }
            }

            pause() {
                if (this.isRunning) {
                    clearInterval(this.timerInterval);
                    this.isRunning = false;
                    
                    this.startBtn.disabled = false;
                    this.pauseBtn.disabled = true;
                    this.lapBtn.disabled = true;
                    this.display.classList.remove('running');
                }
            }

            reset() {
                clearInterval(this.timerInterval);
                this.isRunning = false;
                this.elapsedTime = 0;
                this.laps = [];
                
                this.updateDisplay();
                this.updateLapDisplay();
                
                this.startBtn.disabled = false;
                this.pauseBtn.disabled = true;
                this.lapBtn.disabled = true;
                this.display.classList.remove('running');
            }

            recordLap() {
                if (this.isRunning) {
                    const lapTime = this.elapsedTime;
                    const previousLapTime = this.laps.length > 0 ? this.laps[this.laps.length - 1].time : 0;
                    const splitTime = lapTime - previousLapTime;
                    
                    this.laps.push({
                        number: this.laps.length + 1,
                        time: lapTime,
                        split: splitTime
                    });
                    
                    this.updateLapDisplay();
                }
            }

            updateDisplay() {
                if (this.isRunning) {
                    this.elapsedTime = Date.now() - this.startTime;
                }
                
                const totalMs = Math.floor(this.elapsedTime);
                const milliseconds = totalMs % 1000;
                const seconds = Math.floor(totalMs / 1000) % 60;
                const minutes = Math.floor(totalMs / 60000) % 60;
                const hours = Math.floor(totalMs / 3600000);

                const timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                const millisecondsString = milliseconds.toString().padStart(3, '0');

                this.timeDisplay.textContent = timeString;
                this.millisecondsDisplay.textContent = millisecondsString;
            }

            updateLapDisplay() {
                if (this.laps.length === 0) {
                    this.lapsList.innerHTML = '<div class="no-laps">No lap times recorded</div>';
                    return;
                }

                let lapsHTML = '';
                for (let i = this.laps.length - 1; i >= 0; i--) {
                    const lap = this.laps[i];
                    const lapTimeString = this.formatTime(lap.time);
                    const splitTimeString = this.formatTime(lap.split);
                    
                    lapsHTML += `
                        <div class="lap-item">
                            <span class="lap-number">Lap ${lap.number}</span>
                            <div>
                                <div class="lap-time">${lapTimeString}</div>
                                <div class="lap-split">+${splitTimeString}</div>
                            </div>
                        </div>
                    `;
                }

                this.lapsList.innerHTML = lapsHTML;
            }

            formatTime(totalMs) {
                const milliseconds = Math.floor(totalMs) % 1000;
                const seconds = Math.floor(totalMs / 1000) % 60;
                const minutes = Math.floor(totalMs / 60000) % 60;
                const hours = Math.floor(totalMs / 3600000);

                if (hours > 0) {
                    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(3, '0')}`;
                } else {
                    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(3, '0')}`;
                }
            }
        }

        // Initialize the stopwatch when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new Stopwatch();
        });
